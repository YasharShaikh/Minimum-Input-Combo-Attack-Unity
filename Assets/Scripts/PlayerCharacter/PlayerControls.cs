//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerCharacter/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""464ef66d-33c4-4f9b-a7d2-90ffd1084cfd"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""723fcfe1-f46b-4c08-82db-029873b1178f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwordAttack"",
                    ""type"": ""Button"",
                    ""id"": ""099b3a3a-2088-44c7-9442-4e909564c1ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PowerAttack"",
                    ""type"": ""Button"",
                    ""id"": ""21f8a412-0de5-442d-a260-7142d7d13f8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RollAction"",
                    ""type"": ""Button"",
                    ""id"": ""c72e69cc-808f-4880-b029-208b33ed9383"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9f2c39ea-289e-4055-a837-f9a336de78e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""lockON"",
                    ""type"": ""Button"",
                    ""id"": ""4a45d235-161a-4776-abb4-7e413aeb5786"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RadialMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b4ddeea5-3354-413c-b247-d7d0aead1878"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""50611f93-c5f9-478e-9776-631edefd3b3a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e47079e4-c21c-4235-a8d6-84f24617abf1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bc5dffb3-4e2f-40a1-b750-9d9a63975b45"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bdc863b7-5c24-4970-a176-651b0582f399"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d0a4a02c-88e0-4ef2-b6c9-09cc9fb47dce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""356b8bd8-1dca-43fb-9cef-a083e1684f49"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwordAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d8c8f28-216f-436c-9ffb-9b56d65c7186"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PowerAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""defbe32e-dd1d-4573-a5a9-7f574c080cc2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a399632d-59da-42a4-b168-e875d7f4c234"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lockON"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98586b72-374d-4806-a1b9-f90c07266fdd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RadialMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13db43f8-edf1-4b95-b74c-d5548d1b2c52"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_SwordAttack = m_Player.FindAction("SwordAttack", throwIfNotFound: true);
        m_Player_PowerAttack = m_Player.FindAction("PowerAttack", throwIfNotFound: true);
        m_Player_RollAction = m_Player.FindAction("RollAction", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_lockON = m_Player.FindAction("lockON", throwIfNotFound: true);
        m_Player_RadialMenu = m_Player.FindAction("RadialMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_SwordAttack;
    private readonly InputAction m_Player_PowerAttack;
    private readonly InputAction m_Player_RollAction;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_lockON;
    private readonly InputAction m_Player_RadialMenu;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @SwordAttack => m_Wrapper.m_Player_SwordAttack;
        public InputAction @PowerAttack => m_Wrapper.m_Player_PowerAttack;
        public InputAction @RollAction => m_Wrapper.m_Player_RollAction;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @lockON => m_Wrapper.m_Player_lockON;
        public InputAction @RadialMenu => m_Wrapper.m_Player_RadialMenu;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwordAttack.started += instance.OnSwordAttack;
            @SwordAttack.performed += instance.OnSwordAttack;
            @SwordAttack.canceled += instance.OnSwordAttack;
            @PowerAttack.started += instance.OnPowerAttack;
            @PowerAttack.performed += instance.OnPowerAttack;
            @PowerAttack.canceled += instance.OnPowerAttack;
            @RollAction.started += instance.OnRollAction;
            @RollAction.performed += instance.OnRollAction;
            @RollAction.canceled += instance.OnRollAction;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @lockON.started += instance.OnLockON;
            @lockON.performed += instance.OnLockON;
            @lockON.canceled += instance.OnLockON;
            @RadialMenu.started += instance.OnRadialMenu;
            @RadialMenu.performed += instance.OnRadialMenu;
            @RadialMenu.canceled += instance.OnRadialMenu;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwordAttack.started -= instance.OnSwordAttack;
            @SwordAttack.performed -= instance.OnSwordAttack;
            @SwordAttack.canceled -= instance.OnSwordAttack;
            @PowerAttack.started -= instance.OnPowerAttack;
            @PowerAttack.performed -= instance.OnPowerAttack;
            @PowerAttack.canceled -= instance.OnPowerAttack;
            @RollAction.started -= instance.OnRollAction;
            @RollAction.performed -= instance.OnRollAction;
            @RollAction.canceled -= instance.OnRollAction;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @lockON.started -= instance.OnLockON;
            @lockON.performed -= instance.OnLockON;
            @lockON.canceled -= instance.OnLockON;
            @RadialMenu.started -= instance.OnRadialMenu;
            @RadialMenu.performed -= instance.OnRadialMenu;
            @RadialMenu.canceled -= instance.OnRadialMenu;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSwordAttack(InputAction.CallbackContext context);
        void OnPowerAttack(InputAction.CallbackContext context);
        void OnRollAction(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLockON(InputAction.CallbackContext context);
        void OnRadialMenu(InputAction.CallbackContext context);
    }
}
